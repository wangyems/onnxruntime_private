parameters:
- name: CudaVersion
  type: string

- name: buildJava
  type: boolean

- name: buildNodejs
  type: boolean
  default: false

- name: EP
  type: string

jobs:
- job: Linux_C_API_Packaging_${{ parameters.EP }}
  workspace:
    clean: all
  timeoutInMinutes: 150
  pool: 'onnxruntime-Ubuntu2204-AMD-CPU'
  variables:
  - name: CUDA_VERSION_MAJOR
    ${{ if eq(parameters.CudaVersion, '11.8') }}:
      value: '11'
    ${{ if eq(parameters.CudaVersion, '12.2') }}:
      value: '12'
  - name: CUDA_VERSION
    value: ${{ parameters.CudaVersion }}
  - name: linux_trt_version
    ${{ if eq(parameters.CudaVersion, '11.8') }}:
      value: 10.0.1.6-1.cuda11.8
    ${{ if eq(parameters.CudaVersion, '12.2') }}:
      value: 10.0.1.6-1.cuda12.4

  steps:
  - template: set-version-number-variables-step.yml
  - template: get-docker-image-steps.yml
    parameters:
      Dockerfile: tools/ci_build/github/linux/docker/inference/x86_64/default/cuda${{ variables.CUDA_VERSION_MAJOR }}/Dockerfile
      Context: tools/ci_build/github/linux/docker/inference/x86_64/default/cuda${{ variables.CUDA_VERSION_MAJOR }}
      ${{ if eq(parameters.EP, 'tensorrt') }}:
        DockerBuildArgs: "
          --build-arg TRT_VERSION=${{ variables.linux_trt_version }}
          --build-arg BUILD_UID=$( id -u )
          "
      ${{ if eq(parameters.EP, 'cuda') }}:
        DockerBuildArgs: "
          --build-arg BUILD_UID=$( id -u )
          "
      Repository: onnxruntime${{ parameters.EP }}${{ variables.CUDA_VERSION_MAJOR }}build

  - script: $(Build.SourcesDirectory)/tools/ci_build/github/linux/build_${{ parameters.EP }}_c_api_package.sh
    workingDirectory: $(Build.SourcesDirectory)
    displayName: 'Build ${{ parameters.EP }} C API Package'

  - ${{ if eq(parameters.buildJava, true) }}:
    - template: java-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
        arch: 'linux-x64'
        buildConfig: 'Release'
        artifactName: 'onnxruntime-java-linux-x64-${{ parameters.EP }}'
        version: '$(OnnxRuntimeVersion)'
        libraryName: 'libonnxruntime.so'
        nativeLibraryName: 'libonnxruntime4j_jni.so'

  - ${{ if eq(parameters.buildNodejs, 'true') }}:
    - template: nodejs-artifacts-package-and-publish-steps-posix.yml
      parameters:
        arch: 'x64'
        os: 'linux'
        artifactName: 'drop-onnxruntime-nodejs-linux-x64-${{ parameters.EP }}'

  - template: c-api-artifacts-package-and-publish-steps-posix.yml
    parameters:
      buildConfig: 'Release'
      artifactName: 'onnxruntime-linux-x64-${{ parameters.EP }}-$(OnnxRuntimeVersion)'
      artifactNameNoVersionString: 'onnxruntime-linux-x64-${{ parameters.EP }}'
      libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'

  - template: component-governance-component-detection-steps.yml
    parameters:
      condition: 'succeeded'
  - template: clean-agent-build-directory-step.yml

